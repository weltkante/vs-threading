//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Threading {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.VisualStudio.Threading.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Acquiring locks on threads with a SynchronizationContext applied is not allowed..
        /// </summary>
        internal static string AppliedSynchronizationContextNotAllowed {
            get {
                return ResourceManager.GetString("AppliedSynchronizationContextNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A non-upgradeable read lock is held by the caller and cannot be upgraded..
        /// </summary>
        internal static string CannotUpgradeNonUpgradeableLock {
            get {
                return ResourceManager.GetString("CannotUpgradeNonUpgradeableLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dangerous request for read lock from fork of write lock..
        /// </summary>
        internal static string DangerousReadLockRequestFromWriteLockFork {
            get {
                return ResourceManager.GetString("DangerousReadLockRequestFromWriteLockFork", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This instance must be pushed first..
        /// </summary>
        internal static string FrameMustBePushedFirst {
            get {
                return ResourceManager.GetString("FrameMustBePushedFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Already transitioned to the Completed state..
        /// </summary>
        internal static string InvalidAfterCompleted {
            get {
                return ResourceManager.GetString("InvalidAfterCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation can only be executed against a valid lock..
        /// </summary>
        internal static string InvalidLock {
            get {
                return ResourceManager.GetString("InvalidLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A lock is required..
        /// </summary>
        internal static string InvalidWithoutLock {
            get {
                return ResourceManager.GetString("InvalidWithoutLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JoinableTask does not belong to the context this collection was instantiated with..
        /// </summary>
        internal static string JoinableTaskContextAndCollectionMismatch {
            get {
                return ResourceManager.GetString("JoinableTaskContextAndCollectionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This node already registered..
        /// </summary>
        internal static string JoinableTaskContextNodeAlreadyRegistered {
            get {
                return ResourceManager.GetString("JoinableTaskContextNodeAlreadyRegistered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lazily created value faulted during construction..
        /// </summary>
        internal static string LazyValueFaulted {
            get {
                return ResourceManager.GetString("LazyValueFaulted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lazily created value not yet constructed..
        /// </summary>
        internal static string LazyValueNotCreated {
            get {
                return ResourceManager.GetString("LazyValueNotCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This lock has already been marked for completion.  No new top-level locks can be serviced..
        /// </summary>
        internal static string LockCompletionAlreadyRequested {
            get {
                return ResourceManager.GetString("LockCompletionAlreadyRequested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple continuations are not supported..
        /// </summary>
        internal static string MultipleContinuationsNotSupported {
            get {
                return ResourceManager.GetString("MultipleContinuationsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not allowed while holding an active upgradeable read or write lock from an AsyncReaderWriterLock..
        /// </summary>
        internal static string NotAllowedUnderURorWLock {
            get {
                return ResourceManager.GetString("NotAllowedUnderURorWLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Message pump can only be run from the original thread..
        /// </summary>
        internal static string PushFromWrongThread {
            get {
                return ResourceManager.GetString("PushFromWrongThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The queue is empty..
        /// </summary>
        internal static string QueueEmpty {
            get {
                return ResourceManager.GetString("QueueEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Semaphore is already held and reentrancy setting is &apos;{0}&apos;..
        /// </summary>
        internal static string SemaphoreAlreadyHeld {
            get {
                return ResourceManager.GetString("SemaphoreAlreadyHeld", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This semaphore has been misused and can no longer be used..
        /// </summary>
        internal static string SemaphoreMisused {
            get {
                return ResourceManager.GetString("SemaphoreMisused", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nested semaphore requests must be released in LIFO order when the reentrancy setting is: &apos;{0}&apos;.
        /// </summary>
        internal static string SemaphoreStackNestingViolated {
            get {
                return ResourceManager.GetString("SemaphoreStackNestingViolated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be completed on an STA thread..
        /// </summary>
        internal static string STAThreadCallerNotAllowed {
            get {
                return ResourceManager.GetString("STAThreadCallerNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to switch to the main thread failed to reach the expected thread. Was the JoinableTaskContext initialized on the wrong thread or with a SynchronizationContext whose Post method does not execute its delegate on the main thread?.
        /// </summary>
        internal static string SwitchToMainThreadFailedToReachExpectedThread {
            get {
                return ResourceManager.GetString("SwitchToMainThreadFailedToReachExpectedThread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This frame has already been used with a different instance..
        /// </summary>
        internal static string SyncContextFrameMismatchedAffinity {
            get {
                return ResourceManager.GetString("SyncContextFrameMismatchedAffinity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No SynchronizationContext to reach the main thread has been set..
        /// </summary>
        internal static string SyncContextNotSet {
            get {
                return ResourceManager.GetString("SyncContextNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value factory has called for the value on the same instance..
        /// </summary>
        internal static string ValueFactoryReentrancy {
            get {
                return ResourceManager.GetString("ValueFactoryReentrancy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write lock out-lived by a nested read lock, which is not allowed..
        /// </summary>
        internal static string WriteLockOutlived {
            get {
                return ResourceManager.GetString("WriteLockOutlived", resourceCulture);
            }
        }
    }
}
